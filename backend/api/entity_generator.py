import threading
import time
import random
from api.models import Character
from asgiref.sync import async_to_sync
from channels.layers import get_channel_layer

# Possible values for the character attributes
media_types = ["Books", "Series", "Movie", "Video game"]
character_types = ["Protagonist", "Antagonist", "Deuteragonist", "Confidant", "Love Option"]

def generate_entity_loop():
    while True:
        time.sleep(10)  # wait for 10 seconds before generating a new character

        print("Generating a new character...")

        # Generate and save a random character
        character = Character.objects.create(
            name=f"AutoChar{random.randint(1000, 99999)}",
            mediaOfOrigin="Autogen",
            age=random.randint(18, 70),
            typeOfMedia=random.choice(media_types),
            typeOfCharacter=random.choice(character_types),
            backstory="Generated by system",
            image="images/default.png"
        )

        # Send to WebSocket group
        channel_layer = get_channel_layer()
        async_to_sync(channel_layer.group_send)(
            "characters_group",
            {
                "type": "send_character",
                "character": {
                    "name": character.name,
                    "mediaOfOrigin": character.mediaOfOrigin,
                    "age": character.age,
                    "typeOfMedia": character.typeOfMedia,
                    "typeOfCharacter": character.typeOfCharacter,
                    "backstory": character.backstory,
                    "image": character.image
                }
            }
        )
        print("Character sent to WebSocket group.")

def start_entity_generator():
    thread = threading.Thread(target=generate_entity_loop, daemon=True)
    thread.start()
